// see https://prisma.typegraphql.com/docs/basics/installation#additional-dependencies
generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId()
  name       String   @unique
  /// @TypeGraphQL.omit(input: ["create"])
  role       UserRole @default(User)
  coverImage String?
  /// @TypeGraphQL.omit(output: true)
  password   String

  bookLists BookList[]
  userTags  UserTag[]
}

enum UserRole {
  User
  Moderator
  Admin
}

model Author {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  coverImage  String?

  books Book[] @relation(fields: [booksIDs], references: [id])

  /// @TypeGraphQL.omit(output: true, input: true)
  booksIDs String[] @db.ObjectId
}

model UserTag {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?

  user  User   @relation(fields: [userId], references: [id])
  books Book[] @relation(fields: [booksIDs], references: [id])

  /// @TypeGraphQL.omit(output: true, input: true)
  booksIDs String[] @db.ObjectId
  /// @TypeGraphQL.omit(output: true, input: true)
  userId   String   @db.ObjectId
}

model Tag {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?

  books Book[] @relation(fields: [booksIDs], references: [id])

  /// @TypeGraphQL.omit(output: true, input: true)
  booksIDs String[] @db.ObjectId
}

model Book {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  publishedAt DateTime?
  coverImage  String?
  description String?

  chapters  Chapter[]
  authors   Author[]   @relation(fields: [authorIDs], references: [id])
  bookLists BookList[] @relation(fields: [bookListIDs], references: [id])
  tags      Tag[]      @relation(fields: [tagIDs], references: [id])
  userTags  UserTag[]  @relation(fields: [userTagIDs], references: [id])

  /// @TypeGraphQL.omit(output: true, input: true)
  authorIDs   String[] @db.ObjectId
  /// @TypeGraphQL.omit(output: true, input: true)
  bookListIDs String[] @db.ObjectId
  /// @TypeGraphQL.omit(output: true, input: true)
  tagIDs      String[] @db.ObjectId
  /// @TypeGraphQL.omit(output: true, input: true)
  userTagIDs  String[] @db.ObjectId
}

model BookList {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  coverImage  String?
  description String?

  user  User   @relation(fields: [userID], references: [id])
  books Book[] @relation(fields: [booksIDs], references: [id])

  /// @TypeGraphQL.omit(output: true, input: true)
  userID   String   @db.ObjectId
  /// @TypeGraphQL.omit(output: true, input: true)
  booksIDs String[] @db.ObjectId
}

enum AlignType {
  Right
  Middle
  Left
  Width
}

model Paragraph {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  align           AlignType?
  firstLineIndent Int? // in pixels

  chapter Chapter @relation(fields: [chapterID], references: [id])

  /// @TypeGraphQL.omit(output: true, input: true)
  chapterID String @db.ObjectId
}

enum ChapterType {
  Directory
  Default
}

model Chapter {
  id   String      @id @default(auto()) @map("_id") @db.ObjectId
  type ChapterType
  name String

  book       Book        @relation(fields: [bookID], references: [id])
  paragraphs Paragraph[]

  nestedChapters Chapter[] @relation("nestedChapters")
  top            Chapter?  @relation("nestedChapters", fields: [topChapterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  next           Chapter?  @relation("NextPrevChapter")
  prev           Chapter?  @relation("NextPrevChapter", fields: [prevId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  /// @TypeGraphQL.omit(output: true, input: true)
  prevId       String? @db.ObjectId
  /// @TypeGraphQL.omit(output: true, input: true)
  topChapterId String? @db.ObjectId
  /// @TypeGraphQL.omit(output: true, input: true)
  bookID       String  @db.ObjectId
}
