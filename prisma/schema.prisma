// see https://prisma.typegraphql.com/docs/basics/installation#additional-dependencies
generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId()
  name     String
  /// @TypeGraphQL.omit(output: true)
  password String

  bookLists BookList[]
  userTags  UserTag[]

  @@unique([name])
}

model Author {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  books Book[] @relation(fields: [booksIDs], references: [id])

  /// @TypeGraphQL.omit(output: true, input: true)
  booksIDs String[] @db.ObjectId

  @@unique([name])
}

model UserTag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  user  User   @relation(fields: [userId], references: [id])
  books Book[] @relation(fields: [booksIDs], references: [id])

  /// @TypeGraphQL.omit(output: true, input: true)
  booksIDs String[] @db.ObjectId
  /// @TypeGraphQL.omit(output: true, input: true)
  userId   String   @db.ObjectId

  @@unique([name])
}

model Tag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  books Book[] @relation(fields: [booksIDs], references: [id])

  /// @TypeGraphQL.omit(output: true, input: true)
  booksIDs String[] @db.ObjectId

  @@unique([name])
}

model Book {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  publishedAt DateTime?
  coverImage  String?

  content   Text[]
  authors   Author[]   @relation(fields: [authorIDs], references: [id])
  bookLists BookList[] @relation(fields: [bookListIDs], references: [id])
  tags      Tag[]      @relation(fields: [tagIDs], references: [id])
  userTags  UserTag[]  @relation(fields: [userTagIDs], references: [id])

  /// @TypeGraphQL.omit(output: true, input: true)
  authorIDs   String[] @db.ObjectId
  /// @TypeGraphQL.omit(output: true, input: true)
  bookListIDs String[] @db.ObjectId
  /// @TypeGraphQL.omit(output: true, input: true)
  tagIDs      String[] @db.ObjectId
  /// @TypeGraphQL.omit(output: true, input: true)
  userTagIDs  String[] @db.ObjectId

  @@unique([name])
}

model BookList {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  user  User   @relation(fields: [userID], references: [id])
  books Book[] @relation(fields: [booksIDs], references: [id])

  /// @TypeGraphQL.omit(output: true, input: true)
  userID   String   @db.ObjectId
  /// @TypeGraphQL.omit(output: true, input: true)
  booksIDs String[] @db.ObjectId

  @@unique([name])
}

enum BookElementType {
  Heading
  Text
}

enum AlignType {
  Right
  Middle
  Left
  Width
}

model Text {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  type            BookElementType
  content         String
  align           AlignType?
  firstLineIndent Int? // in milimeters

  book Book @relation(fields: [bookID], references: [id])

  /// @TypeGraphQL.omit(output: true, input: true)
  bookID String @db.ObjectId
}
